buildscript {
    repositories {
		maven {
            url "https://na.artifactory.swg-devops.com/artifactory/wh-imaging-external-maven-virtual"
            credentials {
                username = "${taasArtifactoryUsername}"
                password = "${taasArtifactoryPassword}"
            }
            metadataSources {
                mavenPom()
                artifact()
            }
        }
	}
}

plugins {
    id "ru.vyarus.use-python" version "2.2.0"
    id "org.sonarqube" version "3.0"
}

group = 'com.ibm.watson.health.cdp'
version = "1.0.0"
description = """lib kafka"""

sonarqube {
    properties {
        property "sonar.sources", pySrcDir
        property "sonar.tests", pyTestDir
        property "sonar.python.coverage.reportPaths", pyXmlCoveragePath
        property "sonar.python.xunit.reportPath", pyTestReportPath
    }
}

python {
    //Python dependencies start
    pip 'confluent-kafka:1.7.0'
    pip 'pydantic:1.8.2'
    pip 'python-dotenv:0.19.0'
    //Python dependencies end

    envPath = 'build/venv'
}


task PySetupBuild(type: PythonTask) {
    module = 'pip'
    extraArgs = ['install', 'pytest==6.2.4', 'pytest-cov==2.7.1', 'twine==1.14.0', 'flake8==3.7.8', 'asynctest==0.13.0', 'wheel==0.37.0']
}

task PyGenerateReqs {
    doLast {
        def newFile = new File("${project.projectDir}/pinned.txt")
        newFile.delete()
        newFile.createNewFile()
        python.modules.each { module ->
            newFile.append(module.replace(":", "==") + "\n")
        }
    }
}

task PySetupBuildProperties {
    doLast {
        def newFile = new File("${project.projectDir}/setup.properties")
        newFile.delete()
        newFile.createNewFile()
        newFile.append("[default]")
        newFile.append("\nproject_name=${project.name}")
        newFile.append("\nproject_version=${project.version}")
        newFile.append("\nproject_srcDir=${pySrcDir}")
    }
}

task PyBuildWheel(type: PythonTask) {
    command = 'setup.py'
    extraArgs = ['bdist_wheel', '-d', pyDistDir, '-k']
}

task PyTestPrep(type: PythonTask) {
    command = 'setup.py'
    extraArgs = ['develop']
}

task PyTest(type: PythonTask) {
    module = 'pytest'
    extraArgs = [pyTestDir, '--junitxml='+pyTestReportPath, '-v']
}

task PyCoverage(type: PythonTask) {
    module = 'pytest'
    extraArgs = [pyTestDir, '--cov', pySrcDir, '--cov-report=xml:'+pyXmlCoveragePath, '--cov-report=html:'+pyHtmlCoveragePath, '--cov-report=term']
}

task PyClean {
    doLast {
        exec {
            commandLine 'rm', '-rf', 'build'
        }
    }
}

task PyPublishArtifacts(type: PythonTask) {
    doFirst {
        def taasArtifactoryUsername = "${taasArtifactoryUsername}"
        def taasArtifactoryPassword = "${taasArtifactoryPassword}"
        module = 'twine'
        extraArgs = ['upload', '--repository-url', whiPypiRepositoryUrl, '-u', taasArtifactoryUsername, '-p', taasArtifactoryPassword, pyDistDir+'/*.whl']
    }
}

task PyFlake8(type: PythonTask) {
    module = 'flake8'
    extraArgs = [pySrcDir]
}

task build {}
task test {}
task coverage {}
task uploadArchives {}
task flake8 {}
task clean {}

project.tasks.PyTest.dependsOn project.tasks.PySetupBuild
project.tasks.PyTest.dependsOn project.tasks.PyTestPrep
project.tasks.PyTestPrep.dependsOn project.tasks.PySetupBuildProperties
project.tasks.PyCoverage.dependsOn project.tasks.PySetupBuild
project.tasks.PyCoverage.dependsOn project.tasks.PyTestPrep
project.tasks.PyPublishArtifacts.dependsOn project.tasks.PySetupBuild
project.tasks.PyFlake8.dependsOn project.tasks.PySetupBuild

project.tasks.build.dependsOn project.tasks.PySetupBuild
project.tasks.build.dependsOn project.tasks.PySetupBuildProperties
project.tasks.build.dependsOn project.tasks.PyGenerateReqs
project.tasks.build.dependsOn project.tasks.PyTest
project.tasks.build.finalizedBy project.tasks.PyBuildWheel

project.tasks.test.finalizedBy project.tasks.PyTest
project.tasks.coverage.finalizedBy project.tasks.PyCoverage
project.tasks.clean.finalizedBy project.tasks.PyClean
project.tasks.uploadArchives.finalizedBy project.tasks.PyPublishArtifacts
project.tasks.flake8.finalizedBy project.tasks.PyFlake8

// -----------
