/*******************************************************************************
* IBM Watson Imaging Common Application Framework 3.2                         *
*                                                                             *
* IBM Confidential                                                            *
*                                                                             *
* OCO Source Materials                                                        *
*                                                                             *
*  Copyright IBM Corporation 2019, 2020                                       *
*                                                                             *
* The source code for this program is not published or otherwise              *
* divested of its trade secrets, irrespective of what has been                *
* deposited with the U.S. Copyright Office.                                   *
*******************************************************************************/

buildscript {
    repositories {
		maven {
            url "https://na.artifactory.swg-devops.com/artifactory/wh-imaging-external-maven-virtual"
            credentials {
                username = "${taasArtifactoryUsername}"
                password = "${taasArtifactoryPassword}"
            }
            metadataSources {
                mavenPom()
                artifact()
            }
        }
	}
}

plugins {
    id "ru.vyarus.use-python" version "2.2.0"
    id "org.sonarqube" version "3.0"
}

group = 'com.ibm.watson.health.cdp'
version = "1.0.0"
description = """lib kafka"""

sonarqube {
    properties {
        property "sonar.sources", pySrcDir
        property "sonar.tests", pyTestDir
        property "sonar.python.coverage.reportPaths", pyXmlCoveragePath
        property "sonar.python.xunit.reportPath", pyTestReportPath
    }
}

python {
    // pythonBinary = 'python3' //local development
    extraIndexUrls = ["https://${taasArtifactoryUsername}:${taasArtifactoryPassword}@na.artifactory.swg-devops.com/artifactory/api/pypi/wh-imaging-pypi-virtual/simple"]
    trustedHosts "https://na.artifactory.swg-devops.com"
    //Python dependencies start
    pip 'confluent-kafka:1.5.0'
    pip 'pydantic:1.8.2'
    pip 'python-dotenv:0.19.0'
    //Python dependencies end

    envPath = 'build/venv'
}


task whpaPySetupBuild(type: PythonTask) {
    module = 'pip'
    extraArgs = ['install', 'pytest==6.2.4', 'pytest-cov==2.7.1', 'twine==1.14.0', 'flake8==3.7.8', 'asynctest==0.13.0']
}

task whpaPyGenerateReqs {
    doLast {
        def newFile = new File("${project.projectDir}/pinned.txt")
        newFile.delete()
        newFile.createNewFile()
        python.modules.each { module ->
            newFile.append(module.replace(":", "==") + "\n")
        }
    }
}

task whpaPySetupBuildProperties {
    doLast {
        def newFile = new File("${project.projectDir}/setup.properties")
        newFile.delete()
        newFile.createNewFile()
        newFile.append("[default]")
        newFile.append("\nproject_name=${project.name}")
        newFile.append("\nproject_version=${project.version}")
        newFile.append("\nproject_srcDir=${pySrcDir}")
    }
}

task whpaPyBuildWheel(type: PythonTask) {
    command = 'setup.py'
    extraArgs = ['bdist_wheel', '-d', pyDistDir, '-k']
}

task whpaPyTestPrep(type: PythonTask) {
    command = 'setup.py'
    extraArgs = ['develop']
}

task whpaPyTest(type: PythonTask) {
    module = 'pytest'
    extraArgs = [pyTestDir, '--junitxml='+pyTestReportPath, '-v']
}

task whpaPyCoverage(type: PythonTask) {
    module = 'pytest'
    extraArgs = [pyTestDir, '--cov', pySrcDir, '--cov-report=xml:'+pyXmlCoveragePath, '--cov-report=html:'+pyHtmlCoveragePath, '--cov-report=term']
}

task whpaClean {
    doLast {
        exec {
            commandLine 'rm', '-rf', 'build'
        }
    }
}

task whpaPyPublishArtifacts(type: PythonTask) {
    doFirst {
        def taasArtifactoryUsername = "${taasArtifactoryUsername}"
        def taasArtifactoryPassword = "${taasArtifactoryPassword}"
        module = 'twine'
        extraArgs = ['upload', '--repository-url', whiPypiRepositoryUrl, '-u', taasArtifactoryUsername, '-p', taasArtifactoryPassword, pyDistDir+'/*.whl']
    }
}

task whpaPyFlake8(type: PythonTask) {
    module = 'flake8'
    extraArgs = [pySrcDir]
}

task build {}
task test {}
task coverage {}
task uploadArchives {}
task flake8 {}
task clean {}

project.tasks.whpaPyTest.dependsOn project.tasks.whpaPySetupBuild
project.tasks.whpaPyTest.dependsOn project.tasks.whpaPyTestPrep
project.tasks.whpaPyTestPrep.dependsOn project.tasks.whpaPySetupBuildProperties
project.tasks.whpaPyCoverage.dependsOn project.tasks.whpaPySetupBuild
project.tasks.whpaPyCoverage.dependsOn project.tasks.whpaPyTestPrep
project.tasks.whpaPyPublishArtifacts.dependsOn project.tasks.whpaPySetupBuild
project.tasks.whpaPyFlake8.dependsOn project.tasks.whpaPySetupBuild

project.tasks.build.dependsOn project.tasks.whpaPySetupBuild
project.tasks.build.dependsOn project.tasks.whpaPySetupBuildProperties
project.tasks.build.dependsOn project.tasks.whpaPyGenerateReqs
project.tasks.build.dependsOn project.tasks.whpaPyTest
project.tasks.build.finalizedBy project.tasks.whpaPyBuildWheel

project.tasks.test.finalizedBy project.tasks.whpaPyTest
project.tasks.coverage.finalizedBy project.tasks.whpaPyCoverage
project.tasks.clean.finalizedBy project.tasks.whpaClean
project.tasks.uploadArchives.finalizedBy project.tasks.whpaPyPublishArtifacts
project.tasks.flake8.finalizedBy project.tasks.whpaPyFlake8

// -----------
